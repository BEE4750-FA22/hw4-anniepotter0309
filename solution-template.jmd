---
title: "BEE 4750/5750 Homework 4"
author: "Anne Potter (ap674)"
date: `j import Dates; Dates.Date(Dates.now())`
weave_options:
    term: false
    results: tex
    cache: off
---

<!-- This setups the environment and installs packages, but doesn't appear in the generated document -->
<!-- You shouldn't need to modify this -->
```julia; echo = false; results = "hidden"
using Pkg
Pkg.activate(".")
Pkg.instantiate()
```

# Problem 1

## Problem 1.1
```julia
perc_mass   = [15, 40,  5,  3,  2,  5, 18,   4,   2,   2,   1,  3];
comb_ash    = [ 8,  7,  5, 10, 15,  2,  2, 100, 100, 100, 100, 70];
rec_rate    = [ 0, 55, 15, 10,  0, 30, 40,  60,  75,  80,  50,  0];
component   = ["Food Wastes"; "Paper&Cardboard"; "Plastics"; "Textiles"; "Rubber/Leather"; "Wood"; "Yard Waste"; "Glass"; "Ferrous"; "Aluminum"; "Other Metal"; "Misc"];

facilities  = ["Landfill", "Recycling", "W2E"];
sources     = ["city 1", "city 2"];
city_out    = [100; 170];
capacity    = [200, 350, 150];
fixed_cost  = [2000, 1500, 2500];
tipping_fee = [50, 7, 60];
sourc_dist  = [30 25; 5 15; 15 10];
fac_dist    = [0 0 0; 32 0 15; 18 0 0];

ash = sum(perc_mass .* (comb_ash / 100));
rec = sum(perc_mass .* (rec_rate / 100));
fracs = [0, rec/100, ash/100];
```
## Problem 1.2
```julia
using JuMP
using Cbc

waste_model = Model(Cbc.Optimizer);
S = 1:length(sources);
F = 1:length(facilities);

# waste transported from source s to facility f
@variable(waste_model, W[s in S, f in F] >= 0);
# residual waste transported from one disposal g to another f
@variable(waste_model, R[g in F, f in F] >= 0);
# if the facility f is functioning
@variable(waste_model, Y[f in F], Bin);
```
```math
\text{Objective Variables:}\\
W_s,f = \text{waste sent from each city, s, to each facility, f}\\
R_g,f = \text{residual waste sent from each facility, g, to other facilities, f}\\
Y_f   = \text{binary indicating whether or not each facility, f, is running}\\
```

## Problem 1.3
```julia
sourc_trans = [sourc_dist[1,1]*W[1,1] sourc_dist[1,2]*W[2,1];
               sourc_dist[2,1]*W[1,2] sourc_dist[2,2]*W[2,2];
               sourc_dist[3,1]*W[1,3] sourc_dist[3,2]*W[2,3]];
fac_trans   = [fac_dist[1,1]*R[1,1] fac_dist[1,2]*R[1,2] fac_dist[1,3]*R[1,3];
               fac_dist[2,1]*R[2,1] fac_dist[2,2]*R[2,2] fac_dist[2,3]*R[2,3];
               fac_dist[3,1]*R[3,1] fac_dist[3,2]*R[3,2] fac_dist[3,3]*R[3,3]]
ww = [sum(W[:,1]); sum(W[:,2]); sum(W[:,3])];
rr = [sum(R[:,1]); sum(R[:,2]); sum(R[:,3])];
@objective(waste_model, Min, fixed_cost'*Y + 1.5*(sum(sourc_trans)+sum(fac_trans))+ tipping_fee'*(ww+rr) + 45*fracs[2]*sum(W[:,2]))
```

## Problem 1.4
```julia
# all waste needs to be disposed of
@constraint(waste_model, city[s in S], sum(W[s,:]) == city_out[s]);
# each facility has a capacity limit
@constraint(waste_model, cap[f in F], sum(W[:,f])+sum(R[:,f]) <= capacity[f]);
# residual waste balance
@constraint(waste_model, resid1, sum(R[1,:]) == 0);
@constraint(waste_model, resid2, sum(R[2,:]) == (1-fracs[2])*sum(W[:,2]));
@constraint(waste_model, resid3, sum(R[3,:]) == fracs[3]*sum(W[:,3]));
# if a facility is not operating there should be no waste sent to it
@constraint(waste_model, commit1,  Y[1] == 1);
@constraint(waste_model, commit2, !Y[2] => {sum(W[:,2]) == 0});
@constraint(waste_model, commit3, !Y[3] => {sum(W[:,3]) + sum(R[:,3]) == 0});
```

## Problem 1.5
```julia

optimize!(waste_model)
objective_value(waste_model)

println(value.(W))
println(value.(R))
println(value.(Y))
```

## Problem 1.6

# Problem 2

## Problem 2.1
The tipping fee matrix would be altered so that the W2E value is now 75, reflecting the 
change in price due to policy changes. We would also change the 1.5 in the objective to 
2 to reflect the change in transportation costs. Everything else will remain the same.


## Problem 2.2
```julia
waste_model2 = Model(Cbc.Optimizer);

# changes from previous model
tipping_fee_new = [50, 7, 75];

# waste transported from source s to facility f
@variable(waste_model2, W[s in S, f in F] >= 0);
# residual waste transported from one disposal g to another f
@variable(waste_model2, R[g in F, f in F] >= 0);
# if the facility f is functioning
@variable(waste_model2, Y[f in F], Bin);

sourc_trans = [sourc_dist[1,1]*W[1,1] sourc_dist[1,2]*W[2,1];
               sourc_dist[2,1]*W[1,2] sourc_dist[2,2]*W[2,2];
               sourc_dist[3,1]*W[1,3] sourc_dist[3,2]*W[2,3]];
fac_trans   = [fac_dist[1,1]*R[1,1] fac_dist[1,2]*R[1,2] fac_dist[1,3]*R[1,3];
               fac_dist[2,1]*R[2,1] fac_dist[2,2]*R[2,2] fac_dist[2,3]*R[2,3];
               fac_dist[3,1]*R[3,1] fac_dist[3,2]*R[3,2] fac_dist[3,3]*R[3,3]]
ww = [sum(W[:,1]); sum(W[:,2]); sum(W[:,3])];
rr = [sum(R[:,1]); sum(R[:,2]); sum(R[:,3])];

# new objective
@objective(waste_model2, Min, fixed_cost'*Y + 2*(sum(sourc_trans) + sum(fac_trans))+ tipping_fee_new'*(ww+rr) + 45*fracs[2]*sum(W[:,2]))

# all waste needs to be disposed of
@constraint(waste_model2, city[s in S], sum(W[s,:]) == city_out[s]);
# each facility has a capacity limit
@constraint(waste_model2, cap[f in F], sum(W[:,f])+sum(R[:,f]) <= capacity[f]);
# residual waste balance
@constraint(waste_model2, resid1, sum(R[1,:]) == 0);
@constraint(waste_model2, resid2, sum(R[2,:]) == (1-fracs[2])*sum(W[:,2]));
@constraint(waste_model2, resid3, sum(R[3,:]) == fracs[3]*sum(W[:,3]));
# if a facility is not operating there should be no waste sent to it
@constraint(waste_model2, commit1,  Y[1] == 1);
@constraint(waste_model2, commit2, !Y[2] => {sum(W[:,2]) == 0});
@constraint(waste_model2, commit3, !Y[3] => {sum(W[:,3]) + sum(R[:,3]) == 0});

optimize!(waste_model2)
objective_value(waste_model2)

println(value.(W))
println(value.(R))
println(value.(Y))
```

## Problem 2.3

# References