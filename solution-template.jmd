---
title: "BEE 4750/5750 Homework 4"
author: "Anne Potter (ap674)"
date: `j import Dates; Dates.Date(Dates.now())`
weave_options:
    term: false
    results: tex
    cache: off
---

<!-- This setups the environment and installs packages, but doesn't appear in the generated document -->
<!-- You shouldn't need to modify this -->
```julia; echo = false; results = "hidden"
using Pkg
Pkg.activate(".")
Pkg.instantiate()
```

# Problem 1

## Problem 1.1
```julia
perc_mass   = [15, 40,  5,  3,  2,  5, 18,   4,   2,   2,   1,  3];
comb_ash    = [ 8,  7,  5, 10, 15,  2,  2, 100, 100, 100, 100, 70];
rec_rate    = [ 0, 55, 15, 10,  0, 30, 40,  60,  75,  80,  50,  0];
component   = ["Food Wastes"; "Paper&Cardboard"; "Plastics"; "Textiles"; "Rubber/Leather"; "Wood"; "Yard Waste"; "Glass"; "Ferrous"; "Aluminum"; "Other Metal"; "Misc"];

facilities  = ["Landfill", "Recycling", "W2E"];
sources     = ["city 1", "city 2"];
city_out    = [100, 170];
capacity    = [200, 350, 150];
fixed_cost  = [2000, 1500, 2500];
tipping_fee = [50, 7, 60];
sourc_dist  = [30 25; 5 25; 25 20];
fac_dist    = [32 0 18; 0 0 0; 15 0 0];

ash = sum(perc_mass .* (comb_ash / 100));
rec = sum(perc_mass .* (rec_rate / 100));
fracs = [0, rec/100, ash/100];
```
## Problem 1.2
```julia
using JuMP
using Cbc

waste_model = Model(Cbc.Optimizer);
S = 1:length(sources);
F = 1:length(facilities);

# waste transported from source to facility
@variable(waste_model, W[s in S, f in F] >= 0);
# residual waste transported from one disposal to another
@variable(waste_model, R[g in F, f in F] >= 0);
# if the facility is functioning
@variable(waste_model, Y[f in F], Bin);
```
Objective Variables:
W_s,f = waste sent from each city, s, to each facility, f 
R_g,f = residual waste sent from each facility, g, to other facilities, f
Y_f   = binary indicating whether or not each facility, f, is running

## Problem 1.3
```julia
@objective(waste_model, Min, fixed_cost'*Y + 
            95W[1,1]+87.5W[2,1]+98R[2,1]+77R[3,1]+ #Landfill
            31.5W[1,2]+46.5W[2,2]+                 #Recycling
            82.5W[1,3]+75W[2,3]+82.5R[2,3])        #W2E
```

## Problem 1.4
```julia
# all waste needs to be disposed of
@constraint(waste_model, city[s in S], sum(W[s,:]) == city_out[s]);
# each facility has a capacity limit
@constraint(waste_model, cap[f in F], sum(W[:,f])+sum(R[:,f]) <= capacity[f]);
# residual waste balance
@constraint(waste_model, resid1, sum(R[1,:]) == 0);
@constraint(waste_model, resid2, sum(R[2,:]) == (1-rec)*sum(W[:,2]));
@constraint(waste_model, resid3, sum(R[3,:]) == ash*sum(W[:,3]));
# if a facility is not operating there should be no waste sent to it
@constraint(waste_model, commit1, Y[1] == 1)
@constraint(waste_model, commit2, Y[2] => {sum(W[:,2]) == 0})
@constraint(waste_model, commit3, Y[3] => {sum(W[:,3]) + sum(R[:,3]) == 0})
```

## Problem 1.5
```julia
optimize!(waste_model)
objective_value(waste_model)

value.(W)
value.(R)
value.(Y)

#using DataFrames
#generation = [sum(value.(y).data[g,:]) for g in G]

#results = DataFrame(
 #           "Facility"        => facilities,
  #          "Installed (MW)"  => value.(x).data,
   #         "Generated (GWh)" => generation/1000
    #        )
```

## Problem 1.6

# Problem 2

## Problem 2.1

## Problem 2.2

## Problem 2.3

# References